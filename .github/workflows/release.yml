name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

env:
  CRATE_NAME: meshbbs

jobs:
  linux-tar:
    name: linux-${{ matrix.distro }}-${{ matrix.arch }}-tar
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - { distro: generic, target: x86_64-unknown-linux-gnu, arch: x86_64 }
          - { distro: generic, target: aarch64-unknown-linux-gnu, arch: arm64 }
          - { distro: raspios, target: aarch64-unknown-linux-gnu, arch: arm64 }
          - { distro: raspios, target: armv7-unknown-linux-gnueabihf, arch: armhf }
          - { distro: debian,  target: x86_64-unknown-linux-gnu, arch: x86_64 }
          - { distro: debian,  target: aarch64-unknown-linux-gnu, arch: arm64 }
          - { distro: ubuntu,  target: x86_64-unknown-linux-gnu, arch: x86_64 }
          - { distro: ubuntu,  target: aarch64-unknown-linux-gnu, arch: arm64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install build deps (host)
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev pkg-config

      - name: Install cross toolchain (aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross libudev-dev:arm64

      - name: Install cross toolchain (armhf)
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross libudev-dev:armhf

      - name: Build
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/aarch64-linux-gnu/lib/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package tar.gz with runtime
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          ROOT=package_root
          BIN=target/${{ matrix.target }}/release/${CRATE_NAME}
          mkdir -p "$ROOT/bin" dist
          # Copy runtime skeleton and docs
          cp -a packaging/runtime-skel/. "$ROOT/"
          # Overwrite with real example config from repo root
          cp config.example.toml "$ROOT/config.example.toml"
          # Ensure topics.json included
          mkdir -p "$ROOT/data"
          cp packaging/runtime-skel/data/topics.json "$ROOT/data/topics.json"
          cp "$BIN" "$ROOT/bin/${CRATE_NAME}"
          strip -s "$ROOT/bin/${CRATE_NAME}" || true
          cp README.md LICENSE "$ROOT/"
          OUT=${CRATE_NAME}-v${VERSION}-${{ matrix.distro }}-${{ matrix.arch }}.tar.gz
          tar -C "$ROOT" -czf dist/$OUT .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.distro }}-${{ matrix.arch }}-tar
          path: dist/*.tar.gz

  linux-deb:
    name: linux-${{ matrix.distro }}-${{ matrix.arch }}-deb
    runs-on: ubuntu-22.04
    needs: linux-tar
    strategy:
      fail-fast: false
      matrix:
        include:
          - { distro: raspios, target: aarch64-unknown-linux-gnu, arch: arm64, debarch: arm64 }
          - { distro: raspios, target: armv7-unknown-linux-gnueabihf, arch: armhf, debarch: armhf }
          - { distro: debian,  target: x86_64-unknown-linux-gnu, arch: x86_64, debarch: amd64 }
          - { distro: debian,  target: aarch64-unknown-linux-gnu, arch: arm64, debarch: arm64 }
          - { distro: ubuntu,  target: x86_64-unknown-linux-gnu, arch: x86_64, debarch: amd64 }
          - { distro: ubuntu,  target: aarch64-unknown-linux-gnu, arch: arm64, debarch: arm64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install deb tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev pkg-config libudev-dev
          if [ "${{ matrix.debarch }}" = "arm64" ]; then
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross libudev-dev:arm64
          fi
          if [ "${{ matrix.debarch }}" = "armhf" ]; then
            sudo dpkg --add-architecture armhf
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross libudev-dev:armhf
          fi
          cargo install cargo-deb --locked

      - name: Build .deb
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/aarch64-linux-gnu/lib/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig
        run: |
          cargo deb --target ${{ matrix.target }}
          VERSION=${GITHUB_REF_NAME#v}
          DEB=$(ls target/${{ matrix.target }}/debian/*.deb | head -n1)
          OUT=${CRATE_NAME}_${VERSION}_${{ matrix.distro }}_${{ matrix.debarch }}.deb
          mkdir -p dist
          cp "$DEB" dist/$OUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.distro }}-${{ matrix.arch }}-deb
          path: dist/*.deb

  macos-zip:
    name: macos-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-13, target: x86_64-apple-darwin, arch: intel }
          - { os: macos-14, target: aarch64-apple-darwin, arch: apple_silicon }
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install protobuf
        run: brew install protobuf

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package zip with runtime
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          ROOT=package_root
          BIN=target/${{ matrix.target }}/release/${CRATE_NAME}
          mkdir -p "$ROOT/bin" dist
          cp -a packaging/runtime-skel/. "$ROOT/"
          cp config.example.toml "$ROOT/config.example.toml"
          mkdir -p "$ROOT/data"
          cp packaging/runtime-skel/data/topics.json "$ROOT/data/topics.json"
          cp "$BIN" "$ROOT/bin/${CRATE_NAME}"
          strip -x "$ROOT/bin/${CRATE_NAME}" || true
          cp README.md LICENSE "$ROOT/"
          OUT=${CRATE_NAME}-v${VERSION}-macos-${{ matrix.arch }}.zip
          (cd "$ROOT" && zip -r ../dist/$OUT .)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: dist/*.zip

  windows-zip:
    name: windows-${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-pc-windows-msvc, arch: x86_64 }
          - { target: aarch64-pc-windows-msvc, arch: arm64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install protoc (protobuf)
        run: choco install protoc -y
        shell: powershell

      - name: Set PROTOC environment variable
        run: echo "PROTOC=$(where protoc | Select-Object -First 1)" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package zip with runtime
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $VERSION = $env:GITHUB_REF_NAME.TrimStart('v')
          $ROOT = "package_root"
          New-Item -ItemType Directory -Force -Path "dist" | Out-Null
          New-Item -ItemType Directory -Force -Path "$ROOT/bin" | Out-Null
          Copy-Item -Recurse -Force packaging/runtime-skel/* "$ROOT/"
          Copy-Item -Force config.example.toml "$ROOT/config.example.toml"
          New-Item -ItemType Directory -Force -Path "$ROOT/data" | Out-Null
          Copy-Item -Force packaging/runtime-skel/data/topics.json "$ROOT/data/topics.json"
          $BIN = "target/${{ matrix.target }}/release/${env:CRATE_NAME}.exe"
          Copy-Item $BIN "$ROOT/bin/${env:CRATE_NAME}.exe"
          Copy-Item README.md, LICENSE "$ROOT/"
          $OUT = "${env:CRATE_NAME}-v$VERSION-windows-${{ matrix.arch }}.zip"
          if (Test-Path "$ROOT") { Compress-Archive -Path "$ROOT/*" -DestinationPath "dist/$OUT" -Force }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: dist/*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [linux-tar, linux-deb, macos-zip, windows-zip]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Checksums
        run: |
          cd artifacts
          find . -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.deb" | sed 's|^./||' | sort | xargs shasum -a 256 > SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.deb
            artifacts/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
