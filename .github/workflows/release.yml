name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

env:
  CRATE_NAME: meshbbs

jobs:
  linux-builds:
    name: Linux builds (x86_64, aarch64, armv7)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Enable QEMU for cross-compilation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install libudev-dev (Linux host)
        run: sudo apt-get update && sudo apt-get install -y libudev-dev

      - name: Show pkg-config state
        run: |
          pkg-config --version || true
          pkg-config --libs --cflags libudev || true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install ARM64 toolchain and libs (aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross libudev-dev:arm64 pkg-config

      - name: Install ARMv7 toolchain and libs (armhf)
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross libudev-dev:armhf pkg-config

      - name: Build (release) x86_64
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (release) aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/aarch64-linux-gnu/lib/pkgconfig
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (release) armv7
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        env:
          CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package tar.gz
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          BIN=target/${{ matrix.target }}/release/${CRATE_NAME}
          OUT=${CRATE_NAME}-v${VERSION}-${{ matrix.target }}.tar.gz
          mkdir -p dist
          strip -s "$BIN" || true
          tar -czf dist/$OUT -C target/${{ matrix.target }}/release ${CRATE_NAME}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: dist/*.tar.gz

  deb-packages:
    name: Debian packages (amd64, arm64)
    runs-on: ubuntu-latest
    needs: linux-builds
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
        include:
          - target: x86_64-unknown-linux-gnu
            debarch: amd64
          - target: aarch64-unknown-linux-gnu
            debarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install tools
        run: |
          sudo apt-get update
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y dpkg-dev gcc-aarch64-linux-gnu libc6-dev-arm64-cross libudev-dev libudev-dev:arm64 pkg-config
          cargo install cargo-deb --locked

      - name: Build .deb
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/aarch64-linux-gnu/lib/pkgconfig
        run: |
          # Rebuild for target to ensure correct arch and dependencies
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cargo build --release --target ${{ matrix.target }}
            cargo deb --target ${{ matrix.target }}
          else
            cargo deb --target ${{ matrix.target }}
          fi
          VERSION=${GITHUB_REF_NAME#v}
          # Locate resulting .deb
          DEB=$(ls target/${{ matrix.target }}/debian/*.deb | head -n1)
          OUT=${CRATE_NAME}_${VERSION}_${{ matrix.debarch }}.deb
          mkdir -p dist
          cp "$DEB" dist/$OUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.debarch }}
          path: dist/*.deb

  macos:
    name: macOS builds (Intel/Apple Silicon)
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install protobuf
        run: brew install protobuf

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package tar.gz
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          BIN=target/${{ matrix.target }}/release/${CRATE_NAME}
          OUT=${CRATE_NAME}-v${VERSION}-${{ matrix.target }}.tar.gz
          mkdir -p dist
          strip -x "$BIN" || true
          tar -czf dist/$OUT -C target/${{ matrix.target }}/release ${CRATE_NAME}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: dist/*.tar.gz

  windows:
    name: Windows build (x86_64)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install protoc (protobuf)
        run: choco install protoc -y
        shell: powershell

      - name: Set PROTOC environment variable
        run: echo "PROTOC=$(where protoc | Select-Object -First 1)" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build (release)
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Package zip
        shell: pwsh
        run: |
          $VERSION = $env:GITHUB_REF_NAME.TrimStart('v')
          $BIN = "target/x86_64-pc-windows-msvc/release/${env:CRATE_NAME}.exe"
          $OUT = "${env:CRATE_NAME}-v$VERSION-x86_64-pc-windows-msvc.zip"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          if (Test-Path $BIN) { Compress-Archive -Path $BIN -DestinationPath "dist/$OUT" -Force }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: dist/*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [linux-cross-build, deb-packages, macos, windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Checksums
        run: |
          cd artifacts
          find . -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.deb" | sed 's|^./||' | sort | xargs shasum -a 256 > SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.deb
            artifacts/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
